git init инициализация текущей папки в git
git status статус папки
git help помощь
git log просмотреть всю историю commit'ов

git add file1 переводит статус файла из untracked (при создании файла) или modified (при изменении файла)  в staged (подготовленный)
git add file1 file2
git add . добавить все файлы в текущей папке
git add *.java добавить все файлы в текущей папке с расширением .java
git add someDir/*.java добавить все файлы в папке someDir с расширением .java
git add someDir/ добавить все файлы в папке someDir
git add "*.java" добавить все файлы в проекте с расширением .java

git commit -m "сообщение комита" переводит статус файла в committed (зафиксированный)
git commit -a -m "сообщение комита" тоже самое что последовательное выполнение git add . и git commit -m"сообщение комита". Единственное отличие не добавляет в отслеживаемую зону новые файлы, а добавляет только модифицированные файлы
git commit --amend -m "Новоесообщение комита" добавляет последний коммит, добавляя в него свежие изменения. также меняет сообщение последнего коммита. новый коммит не создается

git stash откатывает до последнего коммита

git diff показывает разницу между текущим неотслеживаемым состонием репозитория и последним снимком репозитория
git diff --staged показывает разницу между текущим отслеживаемым состонием репозитория и последним снимком репозитория
git diff COMMIT_ID показывает разницу между текущим состонием репозитория и указанным снимком репозитория

git reset [--soft| --mixed| --hard] [commit] commit может быть хэщ коммита или вариации указателя HEAD (HEAD^^ на  два коммита назад, HEAD~3 три коммита назад)
git reset --hard возвращает проет к указанному коммиту и удаляет все коммиты после указанного безвозвратно!!!
git reset --mixed  возвращает проет к указанному коммиту, при этом переводит все коммиты после указанного в неотслеживаемую (unstaged) зону
git reset --soft возвращает проет к указанному коммиту, при этом переводит все коммиты после указанного в отслеживаемую (staged) зону
git reset по умолчанию --mixed HEAD 
git reset --hard HEAD~1 удаляет последний коммит и переходит на предыдущий

git checkout <хэш> или HEAD перемещение между коммитами 
git checkout master переход к акутальному коммиту текущей ветки (мастер)
git checkout <хэш> или HEAD -- путь до файла возращает версию файла к указанному коммиту
git checkout --путь к файла возвращает версию файла к последней версии в коммите. Работает только для неослеживаемых изменений
git checkout -- . вернем все файлы в репозитории которая были в последнем коммите. Работает только для неослеживаемых изменений
git checkout НАЗВАНИЕ ВЕТКИ перемещение между ветками

git clean -n показывается какие untracked файлы будут удалены (reset работает только с modified)
git clean -f удаляет untracked файлы (reset работает только с modified)


git remote -v просмотр списка существующих удаленных репозиториев
git remote add НАЗВАНИЕ_РЕПОЗИТОРИЯ (origin) АДРЕС РЕПОЗИТОРИЯ добавить новый удаленный репозиторий, который находится по указанному адресу. При этом, на нашем компьютере к удаленному репозиторию мы будем обращаться по его назаванию.
git remote set-url origin НОВАЯ ССЫЛКА изменить удаленный репозиторий 

git fetch скачивает удаленные ветки с репозитория, но не проводит актуализвацию локальных веток (не делает слияние удаленной ветки с локальной)

git push origin master отправляем на удаленный репозиторий с именем origin нашу ветку master
git pull origin master скачивает новые коммиты  из удаленного  репозитория с именем origin ветку master. pull = fetch + merge origin/master 

git clone ССЫЛКА выполняет init, remote, pull и копирует указанный репозиторий в текущую папку

git branch показывает на какой ветке мы находимся
git branch some-feature находясь на текущем коммите с него отпачковывается новая ветка some-feature
git branch -d НАЗВАНИЕ ВЕТКИ  удаляется ветку
git branch -r список удаленных (remote) веток

git merge НАЗВАНИЕ ВЕТКИ сливает ветку с master

git push origin HEAD:T-17 пушить без forka на общий репозиторий

git commit --amend изменение последнего коммита (перед ним выполнить add .)
git commit --amend -m "Новое название"  изменение названия последнего коммита

